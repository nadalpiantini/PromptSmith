#!/usr/bin/env node

/**
 * PromptSmith MCP Server - Auto-configuring Entry Point
 * Works like other MCP servers - no manual configuration needed
 */

import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { existsSync } from 'fs';

// Auto-detect PromptSmith installation directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const promptsmithRoot = dirname(__dirname);

// Auto-configure environment variables if not set
const defaultEnv = {
  SUPABASE_URL: 'https://nqzhxukuvmdlpewqytpv.supabase.co',
  SUPABASE_ANON_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5xemh4dWt1dm1kbHBld3F5dHB2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjY3ODYwNzMsImV4cCI6MjA0MjM2MjA3M30.xLSRRy7FNMHJd9F39R85dU7qOzHLQxnMO0zQfqRZ1Ho',
  NODE_ENV: 'production',
  TELEMETRY_ENABLED: 'false',
  MCP_MODE: 'true'
};

// Merge with existing environment
const env = { ...process.env };
Object.keys(defaultEnv).forEach(key => {
  if (!env[key]) {
    env[key] = defaultEnv[key];
  }
});

// Check if we should use offline mode
const isOfflineMode = !env.SUPABASE_URL || 
                     env.SUPABASE_URL.includes('localhost') ||
                     env.MCP_OFFLINE_MODE === 'true';

// Find the appropriate MCP server entry point
const offlineWrapperPath = join(promptsmithRoot, 'scripts', 'mcp-offline-wrapper.cjs');
const patchedScriptPath = join(promptsmithRoot, 'scripts', 'patch-and-run-promptsmith.cjs');
const mcpServerPath = join(promptsmithRoot, 'dist', 'mcp-server.js');

let serverCommand, serverArgs;

if (isOfflineMode && existsSync(offlineWrapperPath)) {
  // Use offline wrapper for graceful fallback
  console.error('🔧 PromptSmith MCP: Starting in OFFLINE mode');
  serverCommand = 'node';
  serverArgs = [offlineWrapperPath];
} else if (existsSync(patchedScriptPath) && existsSync(mcpServerPath)) {
  // Use patched version for better STDIO compatibility
  console.error('🚀 PromptSmith MCP: Starting in ONLINE mode');
  serverCommand = 'node';
  serverArgs = [patchedScriptPath];
} else if (existsSync(mcpServerPath)) {
  // Use built version (fallback)
  console.error('🚀 PromptSmith MCP: Starting (fallback mode)');
  serverCommand = 'node';
  serverArgs = [mcpServerPath];
} else {
  console.error('❌ PromptSmith MCP Server not found.');
  console.error('Please run: npm run build');
  process.exit(1);
}

// Spawn the MCP server with auto-configuration
const server = spawn(serverCommand, serverArgs, {
  stdio: 'inherit',  // Pass through stdin/stdout for MCP protocol
  cwd: promptsmithRoot,
  env: env
});

// Handle server lifecycle
server.on('error', (error) => {
  console.error('❌ Failed to start PromptSmith MCP Server:', error.message);
  process.exit(1);
});

server.on('close', (code) => {
  process.exit(code || 0);
});

// Handle signals
process.on('SIGINT', () => {
  server.kill('SIGINT');
});

process.on('SIGTERM', () => {
  server.kill('SIGTERM');
});