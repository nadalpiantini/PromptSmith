FROM node:20-alpine

WORKDIR /app

# Initialize package and install dependencies
RUN npm init -y
RUN npm install express cors axios

# Create monitoring dashboard
RUN cat > monitoring-dashboard.js << 'EOF'
const express = require('express');
const cors = require('cors');
const axios = require('axios');

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Service URLs from environment
const services = {
  jaeger: process.env.JAEGER_URL || 'http://jaeger:16686',
  glitchtip: process.env.GLITCHTIP_URL || 'http://glitchtip:8000',
  grafana: process.env.GRAFANA_URL || 'http://grafana:3000',
  prometheus: process.env.PROMETHEUS_URL || 'http://prometheus:9090',
  redisCommander: process.env.REDIS_COMMANDER_URL || 'http://redis-commander:8081',
  mcpInspector: process.env.MCP_INSPECTOR_URL || 'http://mcp-inspector:6274'
};

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

// Service status endpoint
app.get('/api/status', async (req, res) => {
  const status = {};
  
  for (const [name, url] of Object.entries(services)) {
    try {
      const healthUrl = name === 'jaeger' ? `${url}/` : 
                       name === 'grafana' ? `${url}/api/health` :
                       name === 'prometheus' ? `${url}/-/healthy` :
                       `${url}/health`;
      
      const response = await axios.get(healthUrl, { timeout: 5000 });
      status[name] = {
        url,
        healthy: response.status === 200,
        responseTime: response.headers['x-response-time'] || 'N/A'
      };
    } catch (error) {
      status[name] = {
        url,
        healthy: false,
        error: error.message
      };
    }
  }
  
  res.json(status);
});

// Simple redirect to services (removed proxy for now)
app.get('/api/redirect/:service', (req, res) => {
  const serviceName = req.params.service;
  if (services[serviceName]) {
    res.json({ url: services[serviceName] });
  } else {
    res.status(404).json({ error: 'Service not found' });
  }
});

const PORT = process.env.PORT || 8888;
app.listen(PORT, () => {
  console.log(`Monitoring Dashboard running on port ${PORT}`);
  console.log('Services configured:', Object.keys(services));
});
EOF

# Create monitoring dashboard UI
RUN mkdir -p public && cat > public/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PromptSmith Observability Central</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            color: white;
        }
        
        .header {
            text-align: center;
            padding: 2rem;
            background: rgba(0, 0, 0, 0.2);
        }
        
        .header h1 {
            font-size: 3rem;
            margin-bottom: 0.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .services-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }
        
        .service-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .service-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }
        
        .service-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        
        .service-title {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }
        
        .service-description {
            opacity: 0.8;
            margin-bottom: 1.5rem;
        }
        
        .service-status {
            display: inline-block;
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-weight: bold;
            margin-bottom: 1rem;
        }
        
        .status-healthy {
            background: #4CAF50;
            color: white;
        }
        
        .status-unhealthy {
            background: #f44336;
            color: white;
        }
        
        .status-checking {
            background: #ff9800;
            color: white;
        }
        
        .service-button {
            display: inline-block;
            padding: 0.8rem 2rem;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            text-decoration: none;
            border-radius: 25px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .service-button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.05);
        }
        
        .stats-bar {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin: 2rem 0;
            flex-wrap: wrap;
        }
        
        .stat-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 1rem 2rem;
            border-radius: 10px;
            text-align: center;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #4CAF50;
        }
        
        .refresh-button {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            background: #4CAF50;
            color: white;
            border: none;
            padding: 1rem;
            border-radius: 50%;
            font-size: 1.5rem;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }
        
        .refresh-button:hover {
            background: #45a049;
            transform: scale(1.1);
        }
        
        @media (max-width: 768px) {
            .services-grid {
                grid-template-columns: 1fr;
            }
            .stats-bar {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>ü¶∏‚Äç‚ôÇÔ∏è LIGA DE LA JUSTICIA</h1>
        <p>PromptSmith Observability Command Center</p>
    </div>
    
    <div class="container">
        <div class="stats-bar" id="stats-bar">
            <div class="stat-item">
                <div class="stat-number" id="healthy-services">0</div>
                <div>Healthy Services</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="total-services">6</div>
                <div>Total Services</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="uptime">100%</div>
                <div>System Uptime</div>
            </div>
        </div>
        
        <div class="services-grid" id="services-grid">
            <!-- Services will be populated by JavaScript -->
        </div>
    </div>
    
    <button class="refresh-button" onclick="checkAllServices()" title="Refresh Status">
        üîÑ
    </button>

    <script>
        const services = [
            {
                name: 'jaeger',
                title: 'Jaeger Tracing',
                icon: 'üîç',
                description: 'Distributed tracing and performance monitoring',
                port: '16686',
                path: '/'
            },
            {
                name: 'glitchtip',
                title: 'GlitchTip Errors',
                icon: 'üêõ',
                description: 'Error tracking and performance monitoring',
                port: '8000',
                path: '/'
            },
            {
                name: 'grafana',
                title: 'Grafana Dashboard',
                icon: 'üìä',
                description: 'Metrics visualization and alerting',
                port: '3001',
                path: '/'
            },
            {
                name: 'prometheus',
                title: 'Prometheus Metrics',
                icon: 'üìà',
                description: 'Metrics collection and storage',
                port: '9090',
                path: '/'
            },
            {
                name: 'redisCommander',
                title: 'Redis Commander',
                icon: 'üíæ',
                description: 'Redis database management interface',
                port: '8081',
                path: '/'
            },
            {
                name: 'mcpInspector',
                title: 'MCP Inspector',
                icon: 'üïµÔ∏è',
                description: 'MCP protocol debugging and monitoring',
                port: '6274',
                path: '/'
            }
        ];

        let serviceStatus = {};

        function renderServices() {
            const grid = document.getElementById('services-grid');
            grid.innerHTML = '';
            
            services.forEach(service => {
                const status = serviceStatus[service.name] || { healthy: null };
                const statusClass = status.healthy === null ? 'checking' : 
                                   status.healthy ? 'healthy' : 'unhealthy';
                const statusText = status.healthy === null ? 'Checking...' : 
                                  status.healthy ? '‚úÖ Healthy' : '‚ùå Unhealthy';
                
                const card = document.createElement('div');
                card.className = 'service-card';
                card.innerHTML = `
                    <div class="service-icon">${service.icon}</div>
                    <div class="service-title">${service.title}</div>
                    <div class="service-description">${service.description}</div>
                    <div class="service-status status-${statusClass}">${statusText}</div>
                    <a href="http://localhost:${service.port}${service.path}" 
                       target="_blank" 
                       class="service-button">
                       Open Dashboard
                    </a>
                `;
                grid.appendChild(card);
            });
        }

        async function checkAllServices() {
            // Show checking status
            serviceStatus = {};
            renderServices();
            
            try {
                const response = await fetch('/api/status');
                serviceStatus = await response.json();
                renderServices();
                updateStats();
            } catch (error) {
                console.error('Failed to check service status:', error);
            }
        }

        function updateStats() {
            const healthyCount = Object.values(serviceStatus).filter(s => s.healthy).length;
            const totalCount = services.length;
            const uptime = totalCount > 0 ? Math.round((healthyCount / totalCount) * 100) : 100;
            
            document.getElementById('healthy-services').textContent = healthyCount;
            document.getElementById('total-services').textContent = totalCount;
            document.getElementById('uptime').textContent = uptime + '%';
        }

        // Initialize
        renderServices();
        checkAllServices();
        
        // Auto-refresh every 30 seconds
        setInterval(checkAllServices, 30000);
    </script>
</body>
</html>
EOF

EXPOSE 8888

CMD ["node", "monitoring-dashboard.js"]