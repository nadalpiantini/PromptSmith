#!/bin/bash
# PromptSmith MCP - Escalera de Proceso Inteligente
# Uso: pimpprompt "tu prompt aqu√≠"
# Sistema completamente autom√°tico: detecta contexto, mejora, eval√∫a, guarda como template global
# Zero decisiones manuales, flujo completo integrado

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda simple
show_help() {
    echo -e "${CYAN}üöÄ pimpprompt - Escalera de Proceso Inteligente${NC}"
    echo ""
    echo -e "${YELLOW}${BOLD}Uso:${NC}"
    echo "  pimpprompt \"tu prompt aqu√≠\""
    echo ""
    echo -e "${YELLOW}${BOLD}Ejemplos:${NC}"
    echo "  pimpprompt \"make sql query for users\""
    echo "  pimpprompt \"create landing page\""
    echo "  pimpprompt \"build mobile app\""
    echo "  pimpprompt \"write authentication system\""
    echo "  pimpprompt \"deploy to cloud\""
    echo ""
    echo -e "${YELLOW}${BOLD}Comandos de b√∫squeda:${NC}"
    echo "  pimpprompt --search \"keyword\"    # Buscar templates existentes"
    echo "  pimpprompt --list                # Listar todos los templates"
    echo "  pimpprompt --list sql            # Listar templates por dominio"
    echo ""
    echo -e "${YELLOW}${BOLD}¬øQu√© hace autom√°ticamente?${NC}"
    echo "  üß† Detecta contexto y dominio autom√°ticamente"
    echo "  üöÄ Mejora tu prompt con optimizaciones inteligentes"
    echo "  üìä Eval√∫a y re-mejora hasta alcanzar 100% de calidad"
    echo "  üíæ Guarda como template global para reutilizar"
    echo "  üîç Busca templates similares existentes"
    echo "  üìà Actualiza estad√≠sticas de uso"
    echo ""
    echo -e "${YELLOW}${BOLD}Dominios que detecta autom√°ticamente:${NC}"
    echo "  ${GREEN}sql${NC}, ${GREEN}web${NC}, ${GREEN}mobile${NC}, ${GREEN}backend${NC}, ${GREEN}frontend${NC}, ${GREEN}ai${NC}, ${GREEN}gaming${NC},"
    echo "  ${GREEN}crypto${NC}, ${GREEN}devops${NC}, ${GREEN}saas${NC}, ${GREEN}branding${NC}, ${GREEN}cine${NC}, ${GREEN}education${NC},"
    echo "  ${GREEN}healthcare${NC}, ${GREEN}finance${NC}, ${GREEN}legal${NC}, ${GREEN}general${NC}"
    echo ""
    echo -e "${PURPLE}üí° Solo escribe tu prompt - el sistema hace todo lo dem√°s autom√°ticamente${NC}"
    echo -e "${PURPLE}   Escalera completa: mejora ‚Üí eval√∫a ‚Üí guarda ‚Üí perfecciona${NC}"
}

# Funci√≥n para detectar dominio autom√°ticamente
detect_domain() {
    local prompt="$1"
    local current_dir="$(pwd)"
    local detected_domain="general"

    # Detectar por contenido del prompt
    if echo "$prompt" | grep -qi -E "(SELECT|INSERT|UPDATE|DELETE|CREATE TABLE|DATABASE|QUERY|SQL)"; then
        detected_domain="sql"
    elif echo "$prompt" | grep -qi -E "(HTML|CSS|WEBSITE|LANDING|PAGE|FRONTEND|REACT|VUE|ANGULAR)"; then
        detected_domain="web"
    elif echo "$prompt" | grep -qi -E "(MOBILE|APP|IOS|ANDROID|FLUTTER|REACT NATIVE)"; then
        detected_domain="mobile"
    elif echo "$prompt" | grep -qi -E "(API|BACKEND|SERVER|MICROSERVICE|REST|ENDPOINT)"; then
        detected_domain="backend"
    elif echo "$prompt" | grep -qi -E "(MACHINE LEARNING|AI|MODEL|NEURAL|DEEP LEARNING|LLM)"; then
        detected_domain="ai"
    elif echo "$prompt" | grep -qi -E "(GAME|GAMING|UNITY|UNREAL|GAMEPLAY)"; then
        detected_domain="gaming"
    elif echo "$prompt" | grep -qi -E "(BLOCKCHAIN|CRYPTO|BITCOIN|ETH|SMART CONTRACT|DEFI)"; then
        detected_domain="crypto"
    elif echo "$prompt" | grep -qi -E "(DEPLOY|DOCKER|KUBERNETES|CI/CD|DEVOPS|INFRASTRUCTURE)"; then
        detected_domain="devops"
    elif echo "$prompt" | grep -qi -E "(SAAS|SOFTWARE|SYSTEM|PLATFORM|SERVICE)"; then
        detected_domain="saas"
    elif echo "$prompt" | grep -qi -E "(BRAND|MARKETING|COPY|CAMPAIGN|MESSAGING)"; then
        detected_domain="branding"
    elif echo "$prompt" | grep -qi -E "(SCRIPT|MOVIE|FILM|SCREENPLAY|CINE)"; then
        detected_domain="cine"
    elif echo "$prompt" | grep -qi -E "(COURSE|EDUCATION|LEARN|TEACH|TRAINING)"; then
        detected_domain="education"
    elif echo "$prompt" | grep -qi -E "(HEALTH|MEDICAL|MEDICINE|PATIENT)"; then
        detected_domain="healthcare"
    elif echo "$prompt" | grep -qi -E "(FINANCE|BANKING|MONEY|PAYMENT|FINTECH)"; then
        detected_domain="finance"
    elif echo "$prompt" | grep -qi -E "(LEGAL|LAW|CONTRACT|POLICY|COMPLIANCE)"; then
        detected_domain="legal"
    fi

    # Detectar por archivos del proyecto actual
    if [ "$detected_domain" = "general" ]; then
        if [ -f "$current_dir/package.json" ]; then
            if grep -qi "react\|vue\|angular" "$current_dir/package.json" 2>/dev/null; then
                detected_domain="frontend"
            elif grep -qi "express\|fastify\|koa" "$current_dir/package.json" 2>/dev/null; then
                detected_domain="backend"
            else
                detected_domain="web"
            fi
        elif [ -f "$current_dir/requirements.txt" ] || [ -f "$current_dir/setup.py" ]; then
            detected_domain="backend"
        elif [ -f "$current_dir/Cargo.toml" ]; then
            detected_domain="backend"
        elif [ -f "$current_dir/go.mod" ]; then
            detected_domain="backend"
        elif [ -f "$current_dir/pubspec.yaml" ]; then
            detected_domain="mobile"
        elif [ -f "$current_dir/unity.exe" ] || [ -d "$current_dir/Assets" ]; then
            detected_domain="gaming"
        fi
    fi

    echo "$detected_domain"
}

# Funci√≥n para generar nombre de template autom√°tico
generate_template_name() {
    local prompt="$1"
    local domain="$2"

    # Extraer palabras clave principales
    local keywords=$(echo "$prompt" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9 ]//g' | awk '{for(i=1;i<=NF;i++) if(length($i)>3) print $i}' | head -3 | tr '\n' '_')
    keywords=${keywords%_}  # Remover √∫ltimo underscore

    # Generar nombre con timestamp
    local timestamp=$(date +%m%d)
    local template_name="${domain}_${keywords}_${timestamp}"

    echo "$template_name"
}

# Verificar si se pidi√≥ ayuda o comandos especiales
if [[ "$1" == "-h" || "$1" == "--help" || "$1" == "help" ]]; then
    show_help
    exit 0
fi

# Manejar comandos de b√∫squeda
if [[ "$1" == "--search" ]]; then
    if [ -z "$2" ]; then
        echo -e "${RED}‚ùå Error: Debes proporcionar una palabra clave para buscar${NC}"
        echo "Uso: pimpprompt --search \"keyword\""
        exit 1
    fi
    
    echo -e "${BLUE}${BOLD}üîç Buscando templates: ${NC}$2"
    echo ""
    
    SCRIPT_DIR="$(cd "$(dirname "$(readlink "$0" 2>/dev/null || echo "$0")")" && pwd)"
    cd "$SCRIPT_DIR"
    
    node -e "
    const DirectProcessor = require('./direct-processor.cjs');
    const ps = new DirectProcessor();
    
    ps.searchPrompts('$2', null, 10).then(results => {
        if (results.length === 0) {
            console.log('   üíî No se encontraron templates con \"$2\"');
            console.log('   üí° Intenta con otras palabras clave o crea uno nuevo');
        } else {
            console.log(\`   ‚úÖ Encontrados \${results.length} templates:\`);
            console.log('');
            results.forEach((template, index) => {
                console.log(\`   \${index + 1}. \${template.name}\`);
                console.log(\`      Dominio: \${template.domain}\`);
                console.log(\`      Calidad: \${Math.round((template.score?.overall || 0) * 100)}%\`);
                console.log(\`      Descripci√≥n: \${template.description || 'N/A'}\`);
                console.log('');
            });
        }
    }).catch(err => {
        console.log('   ‚ö†Ô∏è  Error en b√∫squeda:', err.message);
    });
    "
    exit 0
fi

if [[ "$1" == "--list" ]]; then
    DOMAIN_FILTER="$2"
    
    echo -e "${BLUE}${BOLD}üìã Templates disponibles${NC}"
    if [ ! -z "$DOMAIN_FILTER" ]; then
        echo -e "${CYAN}   Filtro de dominio: ${NC}$DOMAIN_FILTER"
    fi
    echo ""
    
    SCRIPT_DIR="$(cd "$(dirname "$(readlink "$0" 2>/dev/null || echo "$0")")" && pwd)"
    cd "$SCRIPT_DIR"
    
    node -e "
    const DirectProcessor = require('./direct-processor.cjs');
    const ps = new DirectProcessor();
    
    ps.searchPrompts('', '$DOMAIN_FILTER', 20).then(results => {
        if (results.length === 0) {
            console.log('   üíî No hay templates disponibles');
            if ('$DOMAIN_FILTER') {
                console.log('   üí° Intenta sin filtro de dominio: pimpprompt --list');
            }
        } else {
            console.log(\`   ‚úÖ \${results.length} templates encontrados:\`);
            console.log('');
            results.forEach((template, index) => {
                console.log(\`   \${index + 1}. \${template.name}\`);
                console.log(\`      Dominio: \${template.domain}\`);
                console.log(\`      ID: \${template.id}\`);
                console.log(\`      Calidad: \${Math.round((template.score?.overall || 0) * 100)}%\`);
                console.log('');
            });
        }
        
        ps.getStats().then(stats => {
            console.log('   üìä Estad√≠sticas globales:');
            console.log(\`      Total templates: \${stats.totalPrompts}\`);
            console.log(\`      Calidad promedio: \${Math.round(stats.averageScore * 100)}%\`);
            console.log(\`      Dominios activos: \${stats.domainsUsed.join(', ')}\`);
        }).catch(err => console.log('   üìä Estad√≠sticas no disponibles'));
    }).catch(err => {
        console.log('   ‚ö†Ô∏è  Error al listar templates:', err.message);
    });
    "
    exit 0
fi

# Verificar que se proporcion√≥ un prompt
if [ -z "$1" ]; then
    echo -e "${RED}‚ùå Error: Necesitas proporcionar un prompt${NC}"
    echo ""
    show_help
    exit 1
fi

# Solo se acepta el prompt, todo lo dem√°s es autom√°tico
PROMPT="$1"

# Iniciar escalera de proceso inteligente
echo -e "${BLUE}${BOLD}üöÄ pimpprompt: Escalera de Proceso Inteligente${NC}"
echo -e "${CYAN}üìù Prompt:${NC} $PROMPT"
echo ""

# Paso 1: Detecci√≥n autom√°tica de contexto
echo -e "${YELLOW}üß† Paso 1: Detectando contexto autom√°ticamente...${NC}"
DOMAIN=$(detect_domain "$PROMPT")
echo -e "${GREEN}   ‚úÖ Dominio detectado:${NC} $DOMAIN"

# Paso 2: Generar nombre de template autom√°tico
TEMPLATE_NAME=$(generate_template_name "$PROMPT" "$DOMAIN")
echo -e "${GREEN}   üíæ Template generado:${NC} $TEMPLATE_NAME"
echo ""

# Ejecutar PromptSmith - Resolver el path real del script
if [[ -L "$0" ]]; then
    # Si es un symlink, obtener el path real
    SCRIPT_DIR="$(cd "$(dirname "$(readlink "$0")")" && pwd)"
else
    # Si no es un symlink, obtener el path normal
    SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
fi
cd "$SCRIPT_DIR"

# Escalera completa de procesamiento inteligente
node "$SCRIPT_DIR/process-prompt.cjs" "$PROMPT" "$DOMAIN" "$TEMPLATE_NAME"
